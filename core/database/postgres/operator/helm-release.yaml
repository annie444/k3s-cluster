# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: postgres-operator
  namespace: database
  annotations:
    meta.helm.sh/release-namespace: "database"
spec:
  interval: 10m
  chart:
    spec:
      chart: postgresql
      version: 15.5.21
      sourceRef:
        kind: HelmRepository
        name: bitnami-charts
        namespace: flux-system

  values:
    global:
      postgresql:
        auth:
          secretKeys:
            adminPasswordKey: "postgres-password"
            userPasswordKey: "password"
            replicationPasswordKey: "replication-password"

    auth:
      enablePostgresUser: true
      database: "synapse"
      username: "synapse"
      replicationUsername: "repl_user"
      secretKeys:
        adminPasswordKey: "postgres-password"
        userPasswordKey: "password"
        replicationPasswordKey: "replication-password"
      usePasswordFiles: false
    primary:
      configuration: |
        # - Connection Settings -
        
        listen_addresses = '*'
        port = 5432
        max_connections = 1000			# (change requires restart)
        reserved_connections = 3		# (change requires restart)
        superuser_reserved_connections = 3	# (change requires restart)

        # - Authentication -

        authentication_timeout = 1min		# 1s-600s
        password_encryption = scram-sha-256	# scram-sha-256 or md5
        scram_iterations = 4096

        # - From https://pgtune.leopard.in.ua/ -

        shared_buffers = 4GB
        effective_cache_size = 12GB
        maintenance_work_mem = 1GB
        checkpoint_completion_target = 0.9
        wal_buffers = 16MB
        default_statistics_target = 100
        random_page_cost = 1.1
        effective_io_concurrency = 300
        work_mem = 1048kB
        huge_pages = off
        min_wal_size = 1GB
        max_wal_size = 4GB
        max_worker_processes = 8
        max_parallel_workers_per_gather = 4
        max_parallel_workers = 8
        max_parallel_maintenance_workers = 4
      resources:
        requests:
          cpu: 1
          memory: 3072Mi
          ephemeral-storage: 50Mi
        limits:
          cpu: 8
          memory: 16384Mi
          ephemeral-storage: 2Gi
      initdb:
        args: "--lc-collate=C --lc-ctype=C"
      persistence:
        enabled: true
        size: 20Gi
    metrics:
      serviceMonitor:
        enabled: true
      enabled: true
      prometheusRule:
        enabled: true
        rules:
          - alert: PostgreSQLMaxConnectionsReached
            expr: sum(pg_stat_activity_count) by (instance) >= sum(pg_settings_max_connections) by (instance) - sum(pg_settings_superuser_reserved_connections) by (instance)
            for: 1m
            labels:
              severity: email
            annotations:
              summary: "{{`{{ $labels.instance }}`}} has maxed out Postgres connections."
              description: "{{`{{ $labels.instance }}`}} is exceeding the currently configured maximum Postgres connection limit (current value: {{`{{ $value }}`}}s). Services may be degraded - please take immediate action (you probably need to increase max_connections in the Docker image and re-deploy."

          - alert: PostgreSQLHighConnections
            expr: sum(pg_stat_activity_count) by (instance) > (sum(pg_settings_max_connections) by (instance) - sum(pg_settings_superuser_reserved_connections) by (instance)) * 0.8
            for: 10m
            labels:
              severity: email
            annotations:
              summary: "{{`{{ $labels.instance }}`}} is over 80% of max Postgres connections."
              description: "{{`{{ $labels.instance }}`}} is exceeding 80% of the currently configured maximum Postgres connection limit (current value: {{`{{ $value }}`}}s). Please check utilization graphs and confirm if this is normal service growth, abuse or an otherwise temporary condition or if new resources need to be provisioned (or the limits increased, which is mostly likely)."

          - alert: PostgreSQLDown
            expr: pg_up != 1
            for: 1m
            labels:
              severity: email
            annotations:
              summary: "PostgreSQL is not processing queries: {{`{{ $labels.instance }}`}}"
              description: "{{`{{ $labels.instance }}`}} is rejecting query requests from the exporter, and thus probably not allowing DNS requests to work either. User services should not be effected provided at least 1 node is still alive."

          - alert: PostgreSQLSlowQueries
            expr: avg(rate(pg_stat_activity_max_tx_duration{datname!~"template.*"}[2m])) by (datname) > 2 * 60
            for: 2m
            labels:
              severity: email
            annotations:
              summary: "PostgreSQL high number of slow on {{`{{ $labels.cluster }}`}} for database {{`{{ $labels.datname }}`}} "
              description: "PostgreSQL high number of slow queries {{`{{ $labels.cluster }}`}} for database {{`{{ $labels.datname }}`}} with a value of {{`{{ $value }}`}} "

          - alert: PostgreSQLQPS
            expr: avg(irate(pg_stat_database_xact_commit{datname!~"template.*"}[5m]) + irate(pg_stat_database_xact_rollback{datname!~"template.*"}[5m])) by (datname) > 10000
            for: 5m
            labels:
              severity: email
            annotations:
              summary: "PostgreSQL high number of queries per second {{`{{ $labels.cluster }}`}} for database {{`{{ $labels.datname }}`}}"
              description: "PostgreSQL high number of queries per second on {{`{{ $labels.cluster }}`}} for database {{`{{ $labels.datname }}`}} with a value of {{`{{ $value }}`}}"

          - alert: PostgreSQLCacheHitRatio
            expr: avg(rate(pg_stat_database_blks_hit{datname!~"template.*"}[5m]) / (rate(pg_stat_database_blks_hit{datname!~"template.*"}[5m]) + rate(pg_stat_database_blks_read{datname!~"template.*"}[5m]))) by (datname) < 0.98
            for: 5m
            labels:
              severity: email
            annotations:
              summary: "PostgreSQL low cache hit rate on {{`{{ $labels.cluster }}`}} for database {{`{{ $labels.datname }}`}}"
              description: "PostgreSQL low on cache hit rate on {{`{{ $labels.cluster }}`}} for database {{`{{ $labels.datname }}`}} with a value of {{`{{ $value }}`}}"
